#!/bin/bash

set -euo pipefail

## The below is modified from https://github.com/activeeos/wireguard-docker

# Find a Wireguard interface
interfaces=`find /etc/wireguard -type f`
if [[ -z $interfaces ]]; then
    echo "$(date): Interface not found in /etc/wireguard" >&2
    exit 1
fi

for interface in $interfaces; do
    echo "$(date): Starting Wireguard $interface"
    wg-quick up $interface
done


## Verify thet wireguard module is installed:
wg_module=`find /lib/modules/$(uname -r) -type f -name '*.ko' | grep -i wireguard`
echo "Module output: $wg_module"

if [[ -z $wg_module ]]; then
    echo "$(date): Wireguard module not installed..  Installing" >&2
    apt update ; apt install -y linux-headers-amd64 wireguard-dkms
else
    echo "Wireguard module seems to be installed: $wg_module      Moving on... "
fi


# Add masquerade rule for NAT'ing VPN traffic bound for the Internet
if [[ $IPTABLES_MASQ -eq 1 ]]; then
    echo "Adding iptables NAT rule"
    iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
fi


# Fix route back to local network
if [[ -z $LOCAL_NETWORK ]]; then
    echo "$(date): ---INFO--- No network provides. Ignoring route back to local network"
else
    echo "$(date): ---INFO---  Adding route back to local network: $LOCAL_NETWORK"
    gw=$(ip route |awk '/default/ {print $3}')
    ip route add to $LOCAL_NETWORK via $gw dev eth0
fi


# get the expected VPN IP address from the interface config file
expected_ips=()
for interface in $interfaces; do
    expected_ip=$(grep -Po 'Endpoint\s=\s\K[^:]*' $interface)
    expected_ips+=($expected_ip)
done

# Handle shutdown behavior
function finish {
    echo "$(date): Shutting down Wireguard"
    for interface in $interfaces; do
        wg-quick down $interface
    done
    if [[ $IPTABLES_MASQ -eq 1 ]]; then
        iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
    fi

    exit 0
}

function fill_actual_ip {
    actual_ips=()
    actual_ip=$( wg | grep -Po 'endpoint:\s\K[^:]*')
    actual_ips+=($actual_ip)
}

trap finish SIGTERM SIGINT SIGQUIT

function write_service_hosts {
    NETWORK_NAME=${NETWORK_NAME:-mediaserver-docker_default}
    service_hosts=$(docker network inspect $NETWORK_NAME | jq -r ".[0].Containers[] | .IPv4Address + \" \" + .Name | sub(\"/16\"; \"\")")
    echo "adding services to /etc/hosts"
    echo "$service_hosts"
    echo "$service_hosts" >> /etc/hosts
}

fill_actual_ip
echo "$(date): ---INFO---  Endpoint in config: $expected_ips"
echo "$(date): ---INFO---  Active EndPoint : $actual_ips"

write_service_hosts

# check IP address every 10 seconds
retry=true
while $retry
do
    fill_actual_ip
    if [[ $expected_ips != $actual_ips ]];
    then
        # make one attempt to restart the wireguard interface if the IP is incorrect
	echo "$(date): Expected IP to be $expected_ips but found $actual_ips. Attempting to restart wireguard."
	for interface in $interfaces; do
            wg-quick down $interface && wg-quick up $interface
        done

        fill_actual_ip
        if [[ $expected_ips != $actual_ips ]];
        then
            # exit the container if the IP is still incorrect after wireguard restart
            echo "$(date): Expected IP to be $expected_ips but found $actual_ips. Activating killswitch."
	    retry=false
        fi
    fi

    sleep 10;
done
